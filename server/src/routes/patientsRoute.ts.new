import express, { Request, Response } from 'express';
import { patientService } from '../services/patientsService';
import {
  NewEntryWithoutId,
  NewPatientEntryWithoutEntries,
  // NonSensitivePatientEntry,
  PatientEntry,
  // PaginatedResponse,
  Entry,
} from '../types';
import { validate } from '../utils/validation';
import { CreatePatientSchema } from '../schemas/patient.schema';
import { EntrySchema } from '../schemas/entry.schema';
import { DatabaseError, NotFoundError, ValidationError } from '../utils/errors';
// import { filterSortSchema } from '../schemas/filterSort.schema';
// import { ZodError } from 'zod';
import qs from 'qs';

interface PaginationQuery {
  page?: string;
  pageSize?: string;
  filterModel?: string;
  sortModel?: string;
}

const patientsRouter = express.Router();

/**
 * GET all patients (non-sensitive data)
 * Supports pagination with page and pageSize query parameters
 * If no pagination parameters are provided, returns all entries
 *
 * New: Added 'withEntries' query parameter to include full medical entries
 */
patientsRouter.get(
  '/',
  async (
    req: Request<{}, {}, {}, PaginationQuery & { withEntries?: string }>,
    res: Response
  ) => {
    try {
      const page = parseInt(req.query.page ?? '1', 10);
      const pageSize = parseInt(req.query.pageSize ?? '10', 10);
      const withEntries = req.query.withEntries === 'true';

      // Parse query parameters using qs library
      const filterModel = req.query.filterModel ? qs.parse(req.query.filterModel as string) : null;
      const sortModel = req.query.sortModel ? qs.parse(req.query.sortModel as string) : null;

      // Validate page and pageSize if provided
      if (
        !isNaN(page) &&
        !isNaN(pageSize) &&
        page > 0 &&
        pageSize > 0
      ) {
        const result = withEntries
          ? await patientService.getPaginatedPatientsWithEntries(page, pageSize)
          : await patientService.getPaginatedNonSensitiveEntries(page, pageSize, filterModel, sortModel);
        res.json(result);
      } else {
        // Return all entries without pagination
        const entries = withEntries
          ? await patientService.getAllPatientsWithEntries()
          : await patientService.getAllNonSensitiveEntries();
        res.json(entries);
      }
      return;
    } catch (error) {
      console.error('Error in GET /patients:', error);
      res.status(500).json({ error: 'Internal server error' });
      return;
    }
  }
);

/**
 * GET a single patient by ID
 */
patientsRouter.get(
  '/:id',
  async (req, res: Response<PatientEntry | { error: string; details?: any }>) => {
    try {
      const patient = await patientService.getPatientById(req.params.id);
      res.json(patient);
    } catch (error) {
      if (error instanceof NotFoundError) {
        res.status(404).json({ error: error.message });
      } else if (error instanceof ValidationError) {
        res.status(400).json({ error: error.message, details: error.details });
      } else {
        res.status(500).json({ error: 'Internal server error' });
      }
    }
  }
);

/**
 * POST a new patient
 */
patientsRouter.post(
  '/',
  validate(CreatePatientSchema),
  async (
    req: Request<unknown, unknown, NewPatientEntryWithoutEntries>,
    res: Response<PatientEntry | { error: string; details?: any }>
  ) => {
    try {
      const addedPatientEntry = await patientService.createPatient(req.body);
      res.status(201).json(addedPatientEntry);
    } catch (error) {
      if (error instanceof ValidationError) {
        res.status(400).json({ error: error.message, details: error.details });
      } else {
        res.status(500).json({ error: 'Internal server error' });
      }
    }
  }
);

/**
 * POST a new entry to a patient
 */
patientsRouter.post(
  '/:id/entries',
  validate(EntrySchema),
  async (
    req: Request<{ id: string }, unknown, NewEntryWithoutId>,
    res: Response
  ) => {
    const patient = await patientService.getPatientById(
      req.params.id
    );
    const addedEntry = await patientService.addEntry(
      patient,
      req.body
    );
    res.status(201).json(addedEntry);
  }
);

/**
 * GET entries for a specific patient
 */
patientsRouter.get(
  '/:id/entries',
  async (req, res: Response<Entry[]>) => {
    try {
      const entries = await patientService.getEntriesByPatientId(
        req.params.id
      );
      res.json(entries);
    } catch (error) {
      res.status(500).json({ error: 'Internal server error' } as any);
    }
  }
);

patientsRouter.delete('/:id', async (req, res) => {
  try {
    await patientService.deletePatient(req.params.id);
    res.status(204).end();
  } catch (error) {
    if (error instanceof NotFoundError) {
      res.status(404).json({ error: error.message });
    } else if (error instanceof DatabaseError) {
      res.status(500).json({ error: 'Internal server error' });
    } else {
      res.status(500).json({ error: 'Unexpected error occurred' });
    }
  }
});

patientsRouter.put(
  '/:id',
  async (req, res: Response<PatientEntry | { error: string; details?: any }>) => {
    try {
      const updatedPatient = await patientService.editPatient(
        req.params.id,
        req.body
      );
      res.json(updatedPatient);
    } catch (error) {
      if (error instanceof NotFoundError) {
        res.status(404).json({ error: error.message });
      } else if (error instanceof ValidationError) {
        res.status(400).json({ error: error.message, details: error.details });
      } else {
        res.status(500).json({ error: 'Internal server error' });
      }
    }
  }
);

patientsRouter.put(
  '/:patientId/entries/:entryId',
  validate(EntrySchema),
  async (
    req: Request<{ patientId: string; entryId: string }, unknown, NewEntryWithoutId>,
    res: Response
  ) => {
    try {
      const { patientId, entryId } = req.params;
      const updatedEntry = await patientService.updateEntry(
        patientId,
        entryId,
        req.body
      );
      res.json(updatedEntry);
    } catch (error) {
      if (error instanceof NotFoundError) {
        res.status(404).json({ error: error.message });
      } else if (error instanceof ValidationError) {
        res.status(400).json({ error: error.message, details: error.details });
      } else {
        res.status(500).json({ error: 'Internal server error' });
      }
    }
  }
);

patientsRouter.delete(
'/:patientId/entries/:entryId',
async (req, res) => {
  try {
    await patientService.deleteEntry(req.params.patientId, req.params.entryId);
    res.status(204).end();
  } catch (error) {
    if (error instanceof NotFoundError) {
      res.status(404).json({ error: error.message });
    } else {
      res.status(500).json({ error: 'Internal server error' });
    }
  }
}
);

export default patientsRouter;